--
-- Copyright (c) 2011 - 2014 Marko Zec, University of Zagreb
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
-- 1. Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright
--    notice, this list of conditions and the following disclaimer in the
--    documentation and/or other materials provided with the distribution.
--
-- THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-- ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
-- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-- OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-- HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-- OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-- SUCH DAMAGE.
--
-- $Id$
--

Component LoadAligner
(
    mem_read_sign_extend_pipelined : in std_logic;
    mem_addr_offset                : in std_logic_vector(1 downto 0);
    mem_size_pipelined             : in std_logic_vector(1 downto 0);
    mem_align_in                   : in std_logic_vector(31 downto 0);
    mem_align_out                  : out std_logic_vector(31 downto 0);
)
{
    Process ()
    {
        If(null)
        {
            variable mem_align_tmp_h : std_logic_vector(15 downto 0);
            variable mem_align_tmp_b : std_logic_vector(7 downto 0);
            
            -- byte
            Case(mem_addr_offset)
            {
                When("00")   { mem_align_tmp_b := mem_align_in(7 downto 0);   }
                When("01")   { mem_align_tmp_b := mem_align_in(15 downto 8);  }
                When("10")   { mem_align_tmp_b := mem_align_in(23 downto 16); }
                When(others) { mem_align_tmp_b := mem_align_in(31 downto 24); }
            }
            
            -- half-word
            Case(mem_addr_offset)
            {
                When("00")   { mem_align_tmp_h := mem_align_in(15 downto 0);  }
                When("10")   { mem_align_tmp_h := mem_align_in(31 downto 16); }
                When(others) { mem_align_tmp_h := "----------------";         }
            }
            
            If(mem_size_pipelined(1) = '1')
            {
                -- word load
                If(mem_addr_offset = "00")
                {
                    mem_align_out <= mem_align_in(31 downto 8) & mem_align_tmp_b;
                }
                Else
                {
                    mem_align_out <= "--------------------------------";
                }
            }
            Else
            {
                If(mem_size_pipelined(0) = '0')
                {
                    -- byte load
                    If(mem_read_sign_extend_pipelined = '1')
                    {
                        If(mem_align_tmp_b(7) = '1')
                        {
                            mem_align_out <= x"ffffff" & mem_align_tmp_b(7 downto 0);
                        }
                        Else
                        {
                            mem_align_out <= x"000000" & mem_align_tmp_b(7 downto 0);
                        }
                    }
                    Else
                    {
                        mem_align_out <= x"000000" & mem_align_tmp_b(7 downto 0);
                    }
                }
                Else
                {
                    -- half word load
                    If(mem_addr_offset(0) = '1')
                    {
                        mem_align_out <= "--------------------------------";
                    }
                    Elsif(mem_read_sign_extend_pipelined = '1')
                    {
                        If(mem_align_tmp_h(15) = '1')
                        {
                            mem_align_out <= x"ffff" & mem_align_tmp_h(15 downto 0);
                        }
                        Else
                        {
                            mem_align_out <= x"0000" & mem_align_tmp_h(15 downto 0);
                        }
                    }
                    Else
                    {
                        mem_align_out <= x"0000" & mem_align_tmp_h(15 downto 0);
                    }
                }
            }
        }
    }
}