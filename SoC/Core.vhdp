--
-- Copyright (c) 2013 - 2016 Marko Zec, University of Zagreb
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
-- 1. Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright
--    notice, this list of conditions and the following disclaimer in the
--    documentation and/or other materials provided with the distribution.
--
-- THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-- ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
-- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-- OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-- HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-- OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-- SUCH DAMAGE.
--
-- Modifications
-- Davor Jadrijevic: instantiation of generic bram modules, parametrization
--
-- $Id$
--

Component Core
(
    Include
    (
        ieee.std_logic_1164,
        ieee.std_logic_unsigned,
        ieee.math_real,
        f32c_pack,
    );
    
    Generic
    (
        C_PC_mask          : std_logic_vector(31 downto 0) := x"ffffffff";
        C_init_PC          : std_logic_vector(31 downto 0) := x"00000000";

        -- COP0 options
        C_clk_freq         : integer;
        C_cpuid            : integer := 0;

        -- cache options
        C_icache_size: integer := 8;
        C_dcache_size: integer := 2;
        C_cached_addr_bits : integer := 20; -- 1 MB
        
        -- address decoding to distinguish RAM/BRAM
        -- MSB 4 bits of address of external RAM
        C_xram_base: std_logic_vector(31 downto 28) := x"8";

        -- debugging options
        C_debug            : boolean;
    );
    
    reset             : in std_logic;
    imem_addr_strobe  : out std_logic;
    imem_addr         : out std_logic_vector(31 downto 2);
    imem_burst_len    : out std_logic_vector(2 downto 0);
    imem_data_in      : in std_logic_vector(31 downto 0);
    imem_data_ready   : in std_logic;
    dmem_addr_strobe  : out std_logic;
    dmem_write        : out std_logic;
    dmem_byte_sel     : out std_logic_vector(3 downto 0);
    dmem_addr         : out std_logic_vector(31 downto 2);
    dmem_burst_len    : out std_logic_vector(2 downto 0);
    dmem_data_in      : in std_logic_vector(31 downto 0);
    dmem_data_out     : out std_logic_vector(31 downto 0);
    dmem_data_ready   : in std_logic;
    intr              : in std_logic_vector(5 downto 0);

    debug_in_data     : in std_logic_vector(7 downto 0);
    debug_in_strobe   : in std_logic;
    debug_in_busy     : out std_logic;
    debug_out_data    : out std_logic_vector(7 downto 0);
    debug_out_strobe  : out std_logic;
    debug_out_busy    : in std_logic;
    debug_active      : out std_logic
)
{
    -- one-hot state encoding
    constant C_D_IDLE  : integer := 0;
    constant C_D_WRITE : integer := 1;
    constant C_D_READ  : integer := 2;
    constant C_D_FETCH : integer := 3;
    constant C_D_BURST : integer := 4;

    -- 1.0E-6 is small delta to prevent floating point errors
    -- aborting compilation when C_icache_size = 0
    -- delta value is insignificant for the result converted to integer
    constant C_icache_addr_bits: integer := integer(ceil((log2(real(1024*C_icache_size)+1.0E-6))-1.0E-6));
    constant C_dcache_addr_bits: integer := integer(ceil((log2(real(1024*C_dcache_size)+1.0E-6))-1.0E-6));
    
    -- bit widths of cache tags
    constant C_itag_bits: integer := C_cached_addr_bits-C_icache_addr_bits+2;  -- +2 = 1 extra bit for data valid + 1 extra bit for addr(31)
    constant C_dtag_bits: integer := C_cached_addr_bits-C_dcache_addr_bits+1;  -- +1 = 1 extra bit for data valid

    signal i_addr           : std_logic_vector(31 downto 2);
    signal cpu_d_addr       : std_logic_vector(31 downto 2);
    signal dcache_addr      : std_logic_vector(31 downto 2);
    signal i_data           : std_logic_vector(31 downto 0);
    signal cpu_d_data_in    : std_logic_vector(31 downto 0);
    signal cpu_d_data_out   : std_logic_vector(31 downto 0);
    signal icache_data_out  : std_logic_vector(31 downto 0);
    signal icache_tag_in    : std_logic_vector(C_itag_bits-1 downto 0);
    signal icache_tag_out   : std_logic_vector(C_itag_bits-1 downto 0);
    signal dcache_tag_in    : std_logic_vector(C_dtag_bits-1 downto 0);
    signal dcache_tag_out   : std_logic_vector(C_dtag_bits-1 downto 0);
    signal iaddr_cacheable  : boolean;
    signal icache_line_valid: boolean;
    signal daddr_cacheable  : boolean;
    signal dcache_line_valid: boolean;
    signal icache_write     : std_logic;
    signal instr_ready      : std_logic;
    signal dcache_write     : std_logic;
    signal flush_i_line     : std_logic;
    signal flush_d_line     : std_logic;
    signal flush_i_addr     : std_logic_vector(31 downto 2);
    signal to_i_bram        : std_logic_vector(C_itag_bits+31 downto 0);
    signal from_i_bram      : std_logic_vector(C_itag_bits+31 downto 0);
    signal to_d_bram        : std_logic_vector(C_dtag_bits+31 downto 0);
    signal from_d_bram      : std_logic_vector(C_dtag_bits+31 downto 0);

    signal R_i_strobe       : std_logic;
    signal R_i_addr         : std_logic_vector(31 downto 2);
    signal R_i_burst_len    : std_logic_vector(2 downto 0);
    signal R_d_addr         : std_logic_vector(31 downto 2);
    signal R_d_burst_len    : std_logic_vector(2 downto 0);
    signal R_dcache_wbuf    : std_logic_vector(31 downto 0);
    signal R_d_state        : std_logic_vector(4 downto 0);
    signal dcache_data_out  : std_logic_vector(31 downto 0);

    signal cpu_d_strobe     : std_logic;
    signal cpu_d_write      : std_logic;
    signal cpu_d_ready      : std_logic;
    signal cpu_d_byte_sel   : std_logic_vector(3 downto 0);
    signal d_tag_valid_bit  : std_logic;
    
    /*
    assert (C_icache_size = 0 or C_icache_size = 2 or C_icache_size = 4
      or C_icache_size = 8 or C_icache_size = 16 or C_icache_size = 32)
      report "Invalid instruction cache size" severity failure;
    assert (C_dcache_size = 0 or C_dcache_size = 2 or C_dcache_size = 4
      or C_dcache_size = 8 or C_dcache_size = 16 or C_dcache_size = 32)
      report "Invalid data cache size" severity failure;
     */
    
    NewComponent Pipeline
    (
        C_PC_mask        => C_PC_mask,
        C_init_PC        => C_init_PC,
        C_clk_freq       => C_clk_freq,
        C_cpuid          => C_cpuid,
        C_debug          => C_debug,
        
        reset            => reset,
        imem_addr_strobe => open,
        imem_addr        => i_addr,
        imem_data_in     => i_data,
        imem_data_ready  => instr_ready,
        dmem_addr_strobe => cpu_d_strobe,
        dmem_write       => cpu_d_write,
        dmem_byte_sel    => cpu_d_byte_sel,
        dmem_addr        => cpu_d_addr,
        dmem_data_in     => cpu_d_data_in,
        dmem_data_out    => cpu_d_data_out,
        dmem_data_ready  => cpu_d_ready,
        flush_i_line     => flush_i_line,
        flush_d_line     => flush_d_line,
        intr             => intr,
        
        debug_in_data    => debug_in_data,
        debug_in_strobe  => debug_in_strobe,
        debug_in_busy    => debug_in_busy,
        debug_out_data   => debug_out_data,
        debug_out_strobe => debug_out_strobe,
        debug_out_busy   => debug_out_busy,
        debug_active     => debug_active,
    );
    
    icache_data_out                     <= from_i_bram(31 downto 0);
    icache_tag_out                      <= from_i_bram(C_itag_bits+31 downto 32);
    to_i_bram(31 downto 0)              <= imem_data_in;
    to_i_bram(C_itag_bits+31 downto 32) <= icache_tag_in;

    flush_i_addr(C_icache_addr_bits-1 downto 2) <= cpu_d_addr(C_icache_addr_bits-1 downto 2);

    imem_addr        <= R_i_addr;
    imem_burst_len   <= R_i_burst_len   when iaddr_cacheable     else (others => '0');
    imem_addr_strobe <= '1'             when not iaddr_cacheable else R_i_strobe;
    i_data           <= icache_data_out when iaddr_cacheable     else imem_data_in;
    instr_ready      <= imem_data_ready when not iaddr_cacheable else '1' when icache_line_valid else '0';

    iaddr_cacheable  <= C_icache_size > 0; -- XXX kseg0: R_i_addr(31 downto 29) = "100";
    icache_write     <= imem_data_ready and R_i_strobe;

    Process ()
    {
        --
        -- instruction cache FSM
        --
        R_i_addr      <= i_addr;
        R_i_burst_len <= (others => '0');
        
        If(iaddr_cacheable and (not icache_line_valid) and (imem_data_ready and R_i_strobe) = '0')
        {
            R_i_strobe <= '1';
        }
        Else
        {
            R_i_strobe <= '0';
        }
        
        --
        -- data cache FSM
        --
        If(R_d_state(C_D_IDLE) = '1')
        {
            If(cpu_d_strobe = '1' and daddr_cacheable)
            {
                R_d_addr  <= cpu_d_addr;
                R_d_state <= (others => '0');
                
                If(cpu_d_write = '1')
                {
                    R_d_state(C_D_WRITE) <= '1';
                }
                Else
                {
                    R_d_state(C_D_READ)  <= '1';
                }
            }
        }
        Elsif(R_d_state(C_D_WRITE) = '1')
        {
            If(dmem_data_ready = '1')
            {
                R_d_state            <= (others => '0');
                R_d_state(C_D_IDLE)  <= '1';
            }
        }
        Elsif(R_d_state(C_D_READ) = '1')
        {
            R_d_state                <= (others => '0');
            If(dcache_line_valid)
            {
                R_d_state(C_D_IDLE)  <= '1';
            }
            Else
            {
                R_d_state(C_D_FETCH) <= '1';
            }
        }
        Elsif(R_d_state(C_D_FETCH) = '1')
        {
            If(dmem_data_ready = '1')
            {
                R_d_state            <= (others => '0');
                R_d_state(C_D_IDLE)  <= '1';
            }
        }
        Else
        {
            R_d_state                <= (others => '0');
            R_d_state(C_D_IDLE)      <= '1';
        }
    }
    
    dmem_addr      <= R_d_addr when R_d_state(C_D_IDLE) = '0' else cpu_d_addr;
    dmem_burst_len <= R_d_burst_len;
    dmem_write     <= cpu_d_write;
    dmem_byte_sel  <= cpu_d_byte_sel;
    dmem_data_out  <= cpu_d_data_out;

    dmem_addr_strobe <= cpu_d_strobe when (not daddr_cacheable) or cpu_d_write = '1'
    else '0'     when R_d_state(C_D_READ) = '1' and dcache_line_valid
    else '0'     when R_d_state(C_D_IDLE) = '1' else cpu_d_strobe;
    
    cpu_d_data_in    <= dcache_data_out when R_d_state(C_D_READ) = '1' else dmem_data_in;
    
    cpu_d_ready      <= '1'                  when R_d_state(C_D_READ) = '1' and dcache_line_valid
    else dmem_data_ready when (not daddr_cacheable and R_d_state(C_D_IDLE) = '1') or R_d_state(C_D_FETCH) = '1' or R_d_state(C_D_WRITE) = '1'
    else '0';

    daddr_cacheable  <= C_dcache_size > 0 and cpu_d_addr(31 downto 28) = C_xram_base;
    
    dcache_write     <= dmem_data_ready when (R_d_state(C_D_WRITE) = '1' or R_d_state(C_D_FETCH) = '1' or R_d_state(C_D_BURST) = '1')
    else flush_d_line;
    
    d_tag_valid_bit <= '0' when R_d_state(C_D_WRITE) = '1' and cpu_d_byte_sel /= "1111" and not dcache_line_valid
    else not flush_d_line;

    dcache_tag_out         <= from_d_bram(C_dtag_bits + 31 downto 32);
    dcache_data_out        <= from_d_bram(31 downto 0);
    to_d_bram(C_dtag_bits + 31 downto 32) <= dcache_tag_in;
    to_d_bram(31 downto 0) <= R_dcache_wbuf when R_d_state(C_D_WRITE) = '1' else dmem_data_in;

    Generate (for i in 0 to 3)
    {
        Process ()
        {
            If(falling_edge(CLK))
            {
                If(cpu_d_byte_sel(i) = '1')
                {
                    R_dcache_wbuf(8 * i + 7 downto 8 * i) <= cpu_d_data_out(8 * i + 7 downto 8 * i);
                }
                Else
                {
                    R_dcache_wbuf(8 * i + 7 downto 8 * i) <= dcache_data_out(8 * i + 7 downto 8 * i);
                }
            }
        }
    }
}